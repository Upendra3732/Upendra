import streamlit as st
import pandas as pd
import numpy as np
import PyPDF2
import docx2txt
import re
import spacy
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

nlp = spacy.load("en_core_web_sm")
nltk.download('stopwords')
stopwords = nltk.corpus.stopwords.words('english')

def extract_text_from_pdf(pdf_file):
    reader = PyPDF2.PdfReader(pdf_file)
    text = "".join([page.extract_text() for page in reader.pages])
    return text

def extract_text_from_docx(docx_file):
    return docx2txt.process(docx_file)

def preprocess_text(text):
    text = re.sub(r'[^a-zA-Z ]', '', text)
    text = text.lower()
    text = " ".join([word for word in text.split() if word not in stopwords])
    return text

def extract_skills(text):
    skills = ["python", "ml", "nlp", "sql", "excel", "tensorflow", "pandas", "numpy", "flask", "django", "streamlit"]
    extracted_skills = [skill for skill in skills if skill in text.lower()]
    return extracted_skills

def train_model():
    data = pd.read_csv("resume_dataset.csv")
    data['processed_text'] = data['resume_text'].apply(preprocess_text)
    label_encoder = LabelEncoder()
    data['category_encoded'] = label_encoder.fit_transform(data['category'])
    X_train, X_test, y_train, y_test = train_test_split(data['processed_text'], data['category_encoded'], test_size=0.2, random_state=42)
    model = make_pipeline(TfidfVectorizer(), MultinomialNB())
    model.fit(X_train, y_train)
    return model, label_encoder

def predict_category(text, model, label_encoder):
    prediction = model.predict([text])
    return label_encoder.inverse_transform(prediction)[0]

st.title("AI Resume Screening System")
uploaded_file = st.file_uploader("Upload Resume (PDF/DOCX)", type=["pdf", "docx"])
model, label_encoder = train_model()

if uploaded_file is not None:
    if uploaded_file.type == "application/pdf":
        resume_text = extract_text_from_pdf(uploaded_file)
    else:
        resume_text = extract_text_from_docx(uploaded_file)
    
    processed_text = preprocess_text(resume_text)
    skills = extract_skills(resume_text)
    category = predict_category(processed_text, model, label_encoder)
    
    st.subheader("Extracted Skills")
    st.write(", ".join(skills) if skills else "No skills detected")
    
    st.subheader("Predicted Job Category")
    st.write(category)
